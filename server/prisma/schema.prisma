// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  imageURL  String   @default("default")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tokens    Token[]
  likes     Like[]
  posts     Post[]

  @@map("users")
}

model Token {
  id        String   @id @default(cuid())
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@map("tokens")
}

model Like {
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@id([postId, userId])
  @@map("likes")
}

model Post {
  id        String   @id @default(cuid())
  body      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parentId  String?
  parent    Post?    @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children  Post[]   @relation("ParentChild")
  likes     Like[]
  medias    Media[]

  @@map("posts")
}

model Media {
  id        String   @id @default(cuid())
  url       String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("media")
}
